// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?

    lastName    String?
    phoneNumber String?

    walletCredits Float     @default(0)
    //
    accounts      Account[]
    sessions      Session[]

    //non next-auth
    Garment      Garment[]
    garmentLikes garmentLikes[]
    Order        Order[]
    userLocation Location[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Location {
    id String @id @default(cuid())

    name String @default("Mi ubicaci√≥n")

    province     String
    municipality String
    district     String

    locationLink  String?
    exactLocation String?

    userId String
    user   User    @relation(fields: [userId], references: [id])
    Order  Order[]

    @@index([userId])
}

//
//
//
//my models
model Garment {
    id             String   @id @default(cuid())
    brand          String
    size           String
    category       String
    userId         String
    current_price  Float
    original_price Float
    retail_price   Float?
    genre          String
    createdAt      DateTime @default(now())

    purchaseDate DateTime?
    isAvailabe   Boolean   @default(true)

    user     User           @relation(fields: [userId], references: [id])
    likes    garmentLikes[]
    pictures Pictures[]
    Order    Order?         @relation(fields: [orderId], references: [id])
    orderId  String?

    @@unique([createdAt, id])
    @@index([userId])
    @@index([orderId])
}

model Pictures {
    garmentId String
    url       String  @unique
    garment   Garment @relation(fields: [garmentId], references: [id])

    @@id([garmentId, url])
    @@index([garmentId])
}

model garmentLikes {
    userId    String
    garmentId String
    user      User    @relation(fields: [userId], references: [id])
    garment   Garment @relation(fields: [garmentId], references: [id])

    @@id([userId, garmentId])
    @@index([userId])
    @@index([garmentId])
}

model Order {
    id        String    @id @default(cuid())
    userId    String
    garments  Garment[]
    user      User      @relation(fields: [userId], references: [id])
    createdAt DateTime  @default(now())

    isPaid        Boolean   @default(false) //false === is in cart still 
    orderStatus   String    @default("cart")
    purchaseDate  DateTime?
    purchaseTotal Float?    @default(0)
    creditsUsed   Float? //user wallet credits

    locationId String?
    location   Location? @relation(fields: [locationId], references: [id])

    @@index([locationId])
    @@index([userId])
}
